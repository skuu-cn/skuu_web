// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:skuu/app/data/models/address_entity.dart';
import 'package:skuu/app/data/models/city_menu_model_entity.dart';
import 'package:skuu/app/data/models/city_model_entity.dart';
import 'package:skuu/app/data/models/day_weather_entity.dart';
import 'package:skuu/app/data/models/hour_weather_entity.dart';
import 'package:skuu/app/data/models/huati_entity.dart';
import 'package:skuu/app/data/models/idCard_bean_entity.dart';
import 'package:skuu/app/data/models/id_bean_entity.dart';
import 'package:skuu/app/data/models/indices_weather_entity.dart';
import 'package:skuu/app/data/models/ip_bean_entity.dart';
import 'package:skuu/app/data/models/message_entity.dart';
import 'package:skuu/app/data/models/real_time_weather_entity.dart';
import 'package:skuu/app/data/models/skuu_blog_page_entity.dart';
import 'package:skuu/app/data/models/skuu_blog_save_entity.dart';
import 'package:skuu/app/data/models/weather_city_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AddressEntity>[] is M) {
      return data.map<AddressEntity>((Map<String, dynamic> e) =>
          AddressEntity.fromJson(e)).toList() as M;
    }
    if (<CityMenuModelEntity>[] is M) {
      return data.map<CityMenuModelEntity>((Map<String, dynamic> e) =>
          CityMenuModelEntity.fromJson(e)).toList() as M;
    }
    if (<CityModelEntity>[] is M) {
      return data.map<CityModelEntity>((Map<String, dynamic> e) =>
          CityModelEntity.fromJson(e)).toList() as M;
    }
    if (<CityModelLocation>[] is M) {
      return data.map<CityModelLocation>((Map<String, dynamic> e) =>
          CityModelLocation.fromJson(e)).toList() as M;
    }
    if (<CityModelRefer>[] is M) {
      return data.map<CityModelRefer>((Map<String, dynamic> e) =>
          CityModelRefer.fromJson(e)).toList() as M;
    }
    if (<DayWeatherEntity>[] is M) {
      return data.map<DayWeatherEntity>((Map<String, dynamic> e) =>
          DayWeatherEntity.fromJson(e)).toList() as M;
    }
    if (<DayWeatherDaily>[] is M) {
      return data.map<DayWeatherDaily>((Map<String, dynamic> e) =>
          DayWeatherDaily.fromJson(e)).toList() as M;
    }
    if (<DayWeatherRefer>[] is M) {
      return data.map<DayWeatherRefer>((Map<String, dynamic> e) =>
          DayWeatherRefer.fromJson(e)).toList() as M;
    }
    if (<HourWeatherEntity>[] is M) {
      return data.map<HourWeatherEntity>((Map<String, dynamic> e) =>
          HourWeatherEntity.fromJson(e)).toList() as M;
    }
    if (<HourWeatherHourly>[] is M) {
      return data.map<HourWeatherHourly>((Map<String, dynamic> e) =>
          HourWeatherHourly.fromJson(e)).toList() as M;
    }
    if (<HourWeatherRefer>[] is M) {
      return data.map<HourWeatherRefer>((Map<String, dynamic> e) =>
          HourWeatherRefer.fromJson(e)).toList() as M;
    }
    if (<HuatiEntity>[] is M) {
      return data.map<HuatiEntity>((Map<String, dynamic> e) =>
          HuatiEntity.fromJson(e)).toList() as M;
    }
    if (<IdCardBeanEntity>[] is M) {
      return data.map<IdCardBeanEntity>((Map<String, dynamic> e) =>
          IdCardBeanEntity.fromJson(e)).toList() as M;
    }
    if (<IdCardBeanData>[] is M) {
      return data.map<IdCardBeanData>((Map<String, dynamic> e) =>
          IdCardBeanData.fromJson(e)).toList() as M;
    }
    if (<IdBeanEntity>[] is M) {
      return data.map<IdBeanEntity>((Map<String, dynamic> e) =>
          IdBeanEntity.fromJson(e)).toList() as M;
    }
    if (<IdBeanData>[] is M) {
      return data.map<IdBeanData>((Map<String, dynamic> e) =>
          IdBeanData.fromJson(e)).toList() as M;
    }
    if (<IndicesWeatherEntity>[] is M) {
      return data.map<IndicesWeatherEntity>((Map<String, dynamic> e) =>
          IndicesWeatherEntity.fromJson(e)).toList() as M;
    }
    if (<IndicesWeatherDaily>[] is M) {
      return data.map<IndicesWeatherDaily>((Map<String, dynamic> e) =>
          IndicesWeatherDaily.fromJson(e)).toList() as M;
    }
    if (<IndicesWeatherRefer>[] is M) {
      return data.map<IndicesWeatherRefer>((Map<String, dynamic> e) =>
          IndicesWeatherRefer.fromJson(e)).toList() as M;
    }
    if (<IpBeanEntity>[] is M) {
      return data.map<IpBeanEntity>((Map<String, dynamic> e) =>
          IpBeanEntity.fromJson(e)).toList() as M;
    }
    if (<IpBeanData>[] is M) {
      return data.map<IpBeanData>((Map<String, dynamic> e) =>
          IpBeanData.fromJson(e)).toList() as M;
    }
    if (<MessageEntity>[] is M) {
      return data.map<MessageEntity>((Map<String, dynamic> e) =>
          MessageEntity.fromJson(e)).toList() as M;
    }
    if (<MessageAuthor>[] is M) {
      return data.map<MessageAuthor>((Map<String, dynamic> e) =>
          MessageAuthor.fromJson(e)).toList() as M;
    }
    if (<RealTimeWeatherEntity>[] is M) {
      return data.map<RealTimeWeatherEntity>((Map<String, dynamic> e) =>
          RealTimeWeatherEntity.fromJson(e)).toList() as M;
    }
    if (<RealTimeWeatherNow>[] is M) {
      return data.map<RealTimeWeatherNow>((Map<String, dynamic> e) =>
          RealTimeWeatherNow.fromJson(e)).toList() as M;
    }
    if (<RealTimeWeatherRefer>[] is M) {
      return data.map<RealTimeWeatherRefer>((Map<String, dynamic> e) =>
          RealTimeWeatherRefer.fromJson(e)).toList() as M;
    }
    if (<SkuuBlogPageEntity>[] is M) {
      return data.map<SkuuBlogPageEntity>((Map<String, dynamic> e) =>
          SkuuBlogPageEntity.fromJson(e)).toList() as M;
    }
    if (<SkuuBlogPageData>[] is M) {
      return data.map<SkuuBlogPageData>((Map<String, dynamic> e) =>
          SkuuBlogPageData.fromJson(e)).toList() as M;
    }
    if (<SkuuBlogPageDataRecords>[] is M) {
      return data.map<SkuuBlogPageDataRecords>((Map<String, dynamic> e) =>
          SkuuBlogPageDataRecords.fromJson(e)).toList() as M;
    }
    if (<SkuuBlogSaveEntity>[] is M) {
      return data.map<SkuuBlogSaveEntity>((Map<String, dynamic> e) =>
          SkuuBlogSaveEntity.fromJson(e)).toList() as M;
    }
    if (<WeatherCityEntity>[] is M) {
      return data.map<WeatherCityEntity>((Map<String, dynamic> e) =>
          WeatherCityEntity.fromJson(e)).toList() as M;
    }
    if (<WeatherCityData>[] is M) {
      return data.map<WeatherCityData>((Map<String, dynamic> e) =>
          WeatherCityData.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AddressEntity).toString(): AddressEntity.fromJson,
    (CityMenuModelEntity).toString(): CityMenuModelEntity.fromJson,
    (CityModelEntity).toString(): CityModelEntity.fromJson,
    (CityModelLocation).toString(): CityModelLocation.fromJson,
    (CityModelRefer).toString(): CityModelRefer.fromJson,
    (DayWeatherEntity).toString(): DayWeatherEntity.fromJson,
    (DayWeatherDaily).toString(): DayWeatherDaily.fromJson,
    (DayWeatherRefer).toString(): DayWeatherRefer.fromJson,
    (HourWeatherEntity).toString(): HourWeatherEntity.fromJson,
    (HourWeatherHourly).toString(): HourWeatherHourly.fromJson,
    (HourWeatherRefer).toString(): HourWeatherRefer.fromJson,
    (HuatiEntity).toString(): HuatiEntity.fromJson,
    (IdCardBeanEntity).toString(): IdCardBeanEntity.fromJson,
    (IdCardBeanData).toString(): IdCardBeanData.fromJson,
    (IdBeanEntity).toString(): IdBeanEntity.fromJson,
    (IdBeanData).toString(): IdBeanData.fromJson,
    (IndicesWeatherEntity).toString(): IndicesWeatherEntity.fromJson,
    (IndicesWeatherDaily).toString(): IndicesWeatherDaily.fromJson,
    (IndicesWeatherRefer).toString(): IndicesWeatherRefer.fromJson,
    (IpBeanEntity).toString(): IpBeanEntity.fromJson,
    (IpBeanData).toString(): IpBeanData.fromJson,
    (MessageEntity).toString(): MessageEntity.fromJson,
    (MessageAuthor).toString(): MessageAuthor.fromJson,
    (RealTimeWeatherEntity).toString(): RealTimeWeatherEntity.fromJson,
    (RealTimeWeatherNow).toString(): RealTimeWeatherNow.fromJson,
    (RealTimeWeatherRefer).toString(): RealTimeWeatherRefer.fromJson,
    (SkuuBlogPageEntity).toString(): SkuuBlogPageEntity.fromJson,
    (SkuuBlogPageData).toString(): SkuuBlogPageData.fromJson,
    (SkuuBlogPageDataRecords).toString(): SkuuBlogPageDataRecords.fromJson,
    (SkuuBlogSaveEntity).toString(): SkuuBlogSaveEntity.fromJson,
    (WeatherCityEntity).toString(): WeatherCityEntity.fromJson,
    (WeatherCityData).toString(): WeatherCityData.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}